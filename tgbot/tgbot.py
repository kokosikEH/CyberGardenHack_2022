# Made by MISIShunters team.

import json
import shutil
import logging
import requests
import datetime

import pandas as pd
from geopy.geocoders import Nominatim
from aiogram import Bot, Dispatcher, executor, types

from moodle_functions import get_list_of_students
from moodle_functions import BASE_CODE as code

# Set an API_TOKEN.
API_TOKEN = '5840716578:AAGxtIgHFCwfF5vVvNnQpr0T4imJIV75XcE'

# Set a host.
url = 'http://127.0.0.1:8000/'

# Configure the logging.
logging.basicConfig(level=logging.INFO)

# Initialize a bot and a dispatcher.
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# Initialize a geolocator.
geolocator = Nominatim(user_agent="geoapiExercises")

# Initializing the global variables.
ud = dict()  # Sessions' data.
with open('userdata.json', 'r', encoding='utf-8') as f: userdata = json.load(f)
with open('database.json', 'r', encoding='utf-8') as f: database = json.load(f)
with open('moodle_codes.json', 'r', encoding='utf-8') as f: moodle_codes = json.load(f)

# Encodings.
weekdays_encodings = {
    0: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    1: "–í—Ç–æ—Ä–Ω–∏–∫",
    2: "–°—Ä–µ–¥–∞",
    3: "–ß–µ—Ç–≤–µ—Ä–≥",
    4: "–ü—è—Ç–Ω–∏—Ü–∞",
    5: "–°—É–±–±–æ—Ç–∞",
    6: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
}

# Initialize a journal.
df = pd.read_excel('schedule.xlsx')
keys = (df["–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏"] + "_" + df["–ù–æ–º–µ—Ä –ø–∞—Ä—ã"].astype(str) + "_" + code).values
subjects = df[code].values
journal = dict()
for key, subject in zip(keys, subjects):
    journal[key] = {
        "–ø—Ä–µ–¥–º–µ—Ç": subject, 
        "–ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å": {
            i: 0 for i in get_list_of_students(moodle_codes[code])
        },
    }

del df, moodle_codes, keys, subject


def reformat_json(m: dict) -> dict:
    """Reformat journal before sending to backend."""
    journal = []

    for key, value in m.items():
        if "—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç" not in value: continue

        journal.append({
            "university": value["—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç"],
            "group": key.split("_")[2],
            "subject": value["–ø—Ä–µ–¥–º–µ—Ç"],
            "date": value["–¥–∞—Ç–∞"],
            "visiting": value["–ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å"],
        })

    for _ in range(6 - len(journal)): journal.append(-1)
    return journal

# Bot's functions.

@dp.message_handler(commands=['start'])
async def start(message: types.Message) -> None:
    """Initializes a dialog."""
    global ud
    uid = str(message.from_id)

    # Reset the current state.
    ud[uid] = dict()
    ud[uid]["state"] = "start"
    ud[uid]["base_message"] = message

    # Upload user's data.
    if uid in userdata:
        ud[uid]["university"] = userdata[uid][2]
        ud[uid]["group"] = userdata[uid][1]
        ud[uid]["name"] = userdata[uid][0]

    # Create a keyboard.
    res = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                    one_time_keyboard=False)
    res.add(types.KeyboardButton(text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏"))

    # Reply to the user.
    await message.answer(text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã –ß—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–º –∑–∞–Ω—è—Ç–∏–∏, "
                              "–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                         reply_markup=res)


@dp.message_handler(commands=['help'])
async def help_function(message: types.Message) -> None:
    """Initializes a dialog."""
    await message.answer(text="–ü—Ä–∏–≤–µ—Ç! üëã –ü—Ä–∏ –ø–æ–º–æ—â–∏ –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ —Ç—ã –º–æ–∂–µ—à—å"
                              " –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏ –≤ –æ–¥–∏–Ω –∫–ª–∏–∫ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏."
                              " –ï—Å–ª–∏ —Ç—ã –∑–¥–µ—Å—å –≤–ø–µ—Ä–≤—ã–µ, —Ç–æ —Å–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—É–¥–µ—Ç –ø—Ä–æ–π—Ç–∏"
                              " –±—ã—Å—Ç—Ä—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é, —É–∫–∞–∑–∞–≤ —Å–≤–æ–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç, –≥—Ä—É–ø–ø—É –∏ –∏–º—è. "
                              " –í–æ –≤—Ä–µ–º—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏ –ø–æ–º–æ—â–∏ "
                              " –∫–æ–º–∞–Ω–¥—ã /cancel.")


@dp.message_handler(content_types=['location'])
async def handle_location(message: types.Message) -> None:
    """Processes user's location."""
    global ud, journal
    uid = str(message.from_id)
    
    # Get the location.
    latitude = str(message.location.latitude)
    longitude = str(message.location.longitude)
    coordinates = geolocator.reverse(latitude + "," + longitude, language='en')
    address = coordinates.raw['address']
    location = address.get('amenity', '')
    if location.startswith('–ò'):  location = location[:7]

    # Determine a visit.
    visit = location == ud[uid]["university"]
    
    # Student is on lesson.
    if visit:
        # Get the date and time.
        ud[uid]["state"] = "start"
        hour = datetime.datetime.now().hour
        date = str(datetime.datetime.today()).split()[0]
        weekday = weekdays_encodings[datetime.datetime.today().weekday()]

        # Determine the number of a lesson.
        if 8 <= hour <= 10:
            num = 1
        elif 10 < hour <= 12:
            num = 2
        elif 12 < hour <= 14:
            num = 3
        elif 14 < hour <= 16:
            num = 4
        elif 16 < hour <= 18:
            num = 5
        else:
            num = "pass"

        # Count visit.
        weekday = "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"
        key = f'{weekday}_{num}_{ud[uid]["group"]}'

        # There is a lesson at the current moment.
        if key in journal:
            journal[key]["–ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å"][ud[uid]["name"]] = 1
            journal[key]["–¥–∞—Ç–∞"] = date
            journal[key]["—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç"] = ud[uid]["university"]

            with open(r"D:\CyberGarden\backend\dataBase.json", 'w') as f:
                json.dump(reformat_json(journal), f)
            requests.post(url, data={'journal': 1})

            await message.answer(text="–ü–æ—Å–µ—â–µ–Ω–∏–µ –∑–∞—á—Ç–µ–Ω–æ!")

        # There is no lesson at the current moment.
        else:
            await message.answer(text="–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–Ω—è—Ç–∏–π —É –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç. "
                                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

    # Student isn't on lesson.
    else:
        res = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                            one_time_keyboard=True)
        res.add(types.KeyboardButton(text="üì° –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º",
                                        request_location=True))
        await message.answer(text="–í–∞—à–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –º–µ—Å—Ç–æ–º –∑–∞–Ω—è—Ç–∏—è. "
                                    "–ú–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞.", reply_markup=res)

@dp.callback_query_handler()
async def process_callback(callback_query: types.CallbackQuery):
    """Handles button presses."""
    global ud
    callback_query = dict(callback_query)
    uid = str(callback_query["from"]["id"])
    message = ud[uid]["base_message"]
    message.text = callback_query["data"]
    await processing(message)


@dp.message_handler()
async def processing(message: types.Message) -> None:
    """Represents the dialog pipeline."""
    global ud, userdata, database
    uid = str(message.from_id)

    # User initialization.
    if uid not in ud:
        await start(message)

    # User authorization.
    elif uid not in userdata and ud[uid]["state"] == "start":
        ud[uid]["state"] = "university"

        await message.answer(text="–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏, "
                                  "–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.")

        res = types.InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        for university in database:
            res.add(types.InlineKeyboardButton(text=university, callback_data=university))
        await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.", reply_markup=res)

    # Saving user's university.
    elif ud[uid]["state"] == "university":
        if message.text in database:
            ud[uid]["university"] = message.text
            ud[uid]["state"] = "group"

            res = types.InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
            for group in database[message.text]:
                res.add(types.InlineKeyboardButton(text=group, callback_data=group))
            await message.answer(text="–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫—É—é –≥—Ä—É–ø–ø—É.", reply_markup=res)
        else:
            await message.answer(text="–î–∞–Ω–Ω–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
                                      " –í—ã–±–µ—Ä–∏—Ç–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö.")

    # Saving user's group.
    elif ud[uid]["state"] == "group":
        if message.text in database[ud[uid]["university"]]:
            ud[uid]["group"] = message.text
            ud[uid]["state"] = "name"

            res = types.InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
            for student in database[ud[uid]["university"]][message.text]:
                res.add(types.InlineKeyboardButton(text=student, callback_data=student))
            await message.answer(text="–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è.", reply_markup=res)
        else:
            await message.answer(text="–î–∞–Ω–Ω–æ–π –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
                                      "–í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É –ø–æ–≤—Ç–æ—Ä–Ω–æ.")

    # Saving user's name.
    elif ud[uid]["state"] == "name":
        if message.text in database[ud[uid]["university"]][ud[uid]["group"]]:
            ud[uid]["name"] = message.text

            userdata[uid] = [message.text, ud[uid]["group"], ud[uid]["university"]]
            with open('userdata.json', 'w') as f:
                json.dump(userdata, f)

            res = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                            one_time_keyboard=True)
            res.add(types.KeyboardButton(text="üì° –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º",
                                         request_location=True))
            await message.answer(text="–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏, "
                                      "–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º."
                                      " –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=res)
        else:
            await message.text(text="–¢–∞–∫–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ"
                                    "–¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã. –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è –ø–æ–≤—Ç–æ—Ä–Ω–æ.")

    # User has already been authorized.
    else:
        res = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                        one_time_keyboard=True)
        res.add(types.KeyboardButton(text="üì° –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º",
                                     request_location=True))
        await message.answer(text="–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏, "
                                  "–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º."
                                  " –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=res)


if __name__ == '__main__':
    # Launch the bot.
    executor.start_polling(dp, skip_updates=True)

    # Create a back up of a database.
    shutil.copy('userdata.json', 'userdata_backup.json')